//
//Note:
//This file is generated by Mako Template
//spi_basic_test
//
`ifndef SPI_BASIC_TEST_SVH
`define SPI_BASIC_TEST_SVH
class spi_basic_test extends uvm_test;

  virtual spi spi_vif;
  virtual apb apb_vif;
  spi_env env;
  ral_block_reg_model rm;
  apb_adapter reg_sqr_adapter;
  spi_virtual_sqr vsqr;
  spi_scoreboard scb;

  function new(string name = "spi_basic_test",uvm_component parent);
    super.new(name, parent);
  endfunction:new

  extern virtual function void build_phase(uvm_phase phase);
  extern virtual function void connect_phase(uvm_phase phase);
  extern virtual function void report_phase(uvm_phase phase);
  extern virtual function void final_phase(uvm_phase phase);

  `uvm_component_utils(spi_basic_test)
endclass: spi_basic_test

function void spi_basic_test::build_phase(uvm_phase phase);
  super.build_phase();

  env = spi_env::type_id::create("env",this);
  vsqr = spi_virtual_sqr::type_id::create("vsqr",this);
  rm = ral_block_reg_model::type_id::create("rm",this);
  rm.configure(null, "");
  rm.build();
  rm.lock_model();
  rm.reset();
  rm.set_hdl_path_root("");
  reg_sqr_adapter = new("reg_sqr_adapter");
endfunction:build_phase

function void spi_basic_test::connect_phase(uvm_phase phase);
  super.connect_phase(phase);
  vsqr.spi_mst_sqr = env.spi_mst_agt.spi_mst_sqr;
  vsqr.spi_slv_sqr = env.spi_slv_agt.spi_slv_sqr;
  vsqr.apb_sqr = env.apb_agt.apb_sqr;
  vsqr.p_rm = this.rm;
  vsqr.p_spi_vif = env.spi_vif;
  vsqr.p_apb_vif = env.apb_vif;
  rm.default_map.set_sequencer(env.apb_agt.sqr, reg_sqr_adapter);
  rm.default_map.set_auto_predict(1);
endfunction: connect_phase

function void spi_basic_test::report_phase(uvm_phase phase);
  uvm_report_server server;
  int err_num;
  super.report_phase(phase);
  server  = get_report_server();
  err_num = server.get_severity_count(UVM_ERROR);
  if(err_num != 0)
    $display("TEST CASE FAILED!")
  else
    $display("TEST CASE PASSED!")
endfunction: report_phase

function void spi_basic_test::final_phase(uvm_phase phase);
  super.final_phase(phase);
  //uvm_top.print_topology();
  //factory.print();
endfunction:final_phase

`endif //SPI_BASIC_TEST_SVH