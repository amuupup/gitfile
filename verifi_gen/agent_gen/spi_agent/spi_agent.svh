//
// Note:
// This file is generated by Mako Template
//-----------------------------------------
// spi agent
//
`ifndef SPI_AGENT_SVH
`define SPI_AGENT_SVH
class spi_agent extends uvm_agent;
  `uvm_component_utils(spi_agent)

  spi_driver m_spi_driver;
  spi_sequencer m_spi_sequencer;
  spi_monitor m_spi_monitor;

  spi_agent_cfg m_spi_agent_cfg;

  virtual apb_if apb_vif;
  virtual mac_if mac_vif;
    
  uvm_analysis_port #(spi_seq_item) ap;
  uvm_analysis_port #(spi_seq_item) ap_transfer;
  
  function new(string name = "spi_agent", uvm_component parent = null);
    super.new(name, parent);
  endfunction // new

  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    if (!uvm_config_db #(spi_agent_cfg)::get(this, "", "m_spi_agent_cfg", m_spi_agent_cfg) )
      `uvm_fatal("CONFIG_LOAD", 
		 "Cannot get() configuration spi_agent_config from uvm_config_db")

    uvm_config_db #(virtual apb_if)::set(this, "m_spi_driver", "apb_vif", m_spi_agent_cfg.apb_vif);
    uvm_config_db #(virtual apb_if)::set(this, "m_spi_monitor", "apb_vif", m_spi_agent_cfg.apb_vif);
    uvm_config_db #(virtual mac_if)::set(this, "m_spi_driver", "mac_vif", m_spi_agent_cfg.mac_vif);
    uvm_config_db #(virtual mac_if)::set(this, "m_spi_monitor", "mac_vif", m_spi_agent_cfg.mac_vif);
    
    if(m_spi_agent_cfg.ACTIVE)
    begin
	  m_spi_driver = spi_driver::type_id::create("m_spi_driver", this);
	  m_spi_sequencer = spi_sequencer::type_id::create("m_spi_sequencer", this);
	  m_spi_monitor = spi_monitor::type_id::create("m_spi_monitor", this);
	  ap = new("ap", this);
	  ap_transfer = new("ap_transfer", this);
    end
  endfunction // build_phase

  function void connect_phase(uvm_phase phase);
    if(m_spi_agent_cfg.ACTIVE)
    begin
	  m_spi_driver.seq_item_port.connect(m_spi_sequencer.seq_item_export);
	  m_spi_monitor.ap.connect(ap);
	  m_spi_driver.ap.connect(ap_transfer);
    end
  endfunction // connect_phase
  
endclass // spi_agent
`endif //SPI_AGENT_SVH

