//
// Note:
// This file is generated by Mako Template
//-----------------------------------------
// spi_monitor
//
`ifndef SPI_MONITOR_SVH
`define SPI_MONITOR_SVH
class spi_monitor extends uvm_monitor;
  `uvm_component_utils(spi_monitor)

  virtual apb_if apb_vif;
  virtual mac_if mac_vif;
  
  spi_seq_item data_pkt;

  uvm_analysis_port#(spi_seq_item) ap;
  
  function new(string name = "spi_monitor", uvm_component parent = null);
    super.new(name, parent);
  endfunction // new

  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    //get i/f

    if (!uvm_config_db #(virtual apb_if)::get(this, "", "apb_vif", apb_vif) )
      `uvm_fatal(this.get_name(), 
		 "Cannot get 'apb_vif' from uvm_config_db")
    if (!uvm_config_db #(virtual mac_if)::get(this, "", "mac_vif", mac_vif) )
      `uvm_fatal(this.get_name(), 
		 "Cannot get 'mac_vif' from uvm_config_db")
    
    ap = new("ap", this);
  endfunction // build_phase

  task main_phase(uvm_phase phase);
    bit pkt_done = 0;
    
    forever
      begin
	pkt_done = 0;
	data_pkt = spi_seq_item::type_id::create("data_pkt", this);

	//
	//add monitor logic here:
	//
	#100;
	
	//pkt_done = 1;
	wait(pkt_done);
	
	if(pkt_done)
	  begin
	    ap.write(data_pkt);
	  end
	
      end // forever begin
  endtask // main_phase

  
endclass // spi_monitor
`endif //SPI_MONITOR_SVH
